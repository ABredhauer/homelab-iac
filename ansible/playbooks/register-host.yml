---
# ansible/playbooks/register-host.yml
# MAC-based host registration using provisioning inventory

- name: Register New Host via MAC Lookup
  hosts: localhost
  connection: local
  gather_facts: true
  
  vars:
    # Input from first-boot script
    primary_mac_input: "{{ primary_mac | lower }}"
    temp_ip_input: "{{ temp_ip }}"
    
    # Semaphore API credentials
    semaphore_url: "{{ SEMAPHORE_WEB_ROOT }}"
    semaphore_project_id: "{{ SEMAPHORE_PROJECT_ID }}"
    semaphore_inventory_id: "{{ SEMAPHORE_INVENTORY_ID }}"  # Production inventory ID
    semaphore_api_token: "{{ SEMAPHORE_API_TOKEN }}"
  
  tasks:
    - name: Display registration request
      debug:
        msg: |
          Registration request received:
          - Primary MAC: {{ primary_mac_input }}
          - Temporary IP: {{ temp_ip_input }}
          - Searching provisioning inventory...
    
    # ===== SEARCH PROVISIONING INVENTORY (Ansible Native!) =====
    - name: Find matching host in provisioning inventory
      set_fact:
        matched_host: >-
          {{
            hostvars | dict2items |
            selectattr('value.primary_interface.mac', 'defined') |
            selectattr('value.primary_interface.mac', 'equalto', primary_mac_input) |
            first | default({'key': 'not_found', 'value': {}})
          }}
    
    - name: Verify host was found
      assert:
        that:
          - matched_host.key != 'not_found'
          - matched_host.value.target_hostname is defined
        fail_msg: |
          ❌ MAC address {{ primary_mac_input }} not found in provisioning inventory.
          
          Available MACs in provisioning inventory:
          {% for host in groups['unprovisioned_hosts'] | default([]) %}
          - {{ hostvars[host].primary_interface.mac | default('undefined') }} → {{ hostvars[host].target_hostname | default('undefined') }}
          {% endfor %}
          
          Please add this MAC to: ansible/inventory/provisioning-database.yml
    
    - name: Extract host configuration
      set_fact:
        host_config: "{{ matched_host.value }}"
        target_hostname: "{{ matched_host.value.target_hostname }}"
    
    - name: Display identified host
      debug:
        msg: |
          ✓ Host identified from provisioning inventory:
          
          Hostname: {{ target_hostname }}
          Node ID: {{ host_config.node_id }}
          Description: {{ host_config.target_description }}
          Target IP: {{ host_config.primary_interface.static_ip }}
          Groups: {{ host_config.target_groups | join(', ') }}
          Role: {{ host_config.target_role }}
    
    # ===== FETCH PRODUCTION INVENTORY VIA API =====
    - name: Fetch current production inventory from Semaphore
      uri:
        url: "{{ semaphore_url }}/api/project/{{ semaphore_project_id }}/inventory/{{ semaphore_inventory_id }}"
        method: GET
        headers:
          Authorization: "Bearer {{ semaphore_api_token }}"
        return_content: yes
        status_code: 200
      register: current_inventory_response
    
    - name: Parse production inventory
      set_fact:
        current_inventory: "{{ current_inventory_response.json.inventory | from_yaml }}"
        inventory_metadata: "{{ current_inventory_response.json }}"
    
    - name: Ensure all.children exists in production inventory
      set_fact:
        current_inventory: >-
          {{
            current_inventory | combine({
              'all': {
                'children': current_inventory.all.children | default({})
              }
            }, recursive=True)
          }}
    
    - name: Ensure primary target group exists
      set_fact:
        primary_group: "{{ host_config.target_groups[0] }}"
        current_inventory: >-
          {{
            current_inventory | combine({
              'all': {
                'children': current_inventory.all.children | combine({
                  host_config.target_groups[0]: {
                    'hosts': current_inventory.all.children[host_config.target_groups[0]].hosts | default({}),
                    'vars': {
                      'ansible_ssh_common_args': '-o StrictHostKeyChecking=no'
                    }
                  }
                })
              }
            }, recursive=True)
          }}
    
    - name: Build new host entry with provisioning data
      set_fact:
        new_host_entry:
          "{{ target_hostname }}":
            # Connection
            ansible_host: "{{ temp_ip_input }}"
            ansible_user: root
            ansible_python_interpreter: /usr/bin/python3
            
            # Lifecycle tracking
            lifecycle_state: registered
            registered_at: "{{ ansible_date_time.iso8601 }}"
            registered_by: first-boot-automation
            
            # Node identification
            node_id: "{{ host_config.node_id }}"
            node_description: "{{ host_config.target_description }}"
            primary_mac: "{{ primary_mac_input }}"
            
            # Network configuration
            network_interfaces:
              primary: "{{ host_config.primary_interface }}"
              cluster: "{{ host_config.cluster_interface | default({}) }}"
            
            # Cluster configuration
            cluster_member: false
            target_cluster: "{{ host_config.target_cluster }}"
            cluster_role: "{{ host_config.target_role }}"
            
            # Storage and hardware
            storage_config: "{{ host_config.storage | default({}) }}"
            hardware: "{{ host_config.hardware | default({}) }}"
    
    - name: Add new host to production inventory
      set_fact:
        updated_inventory: >-
          {{
            current_inventory | combine({
              'all': {
                'children': current_inventory.all.children | combine({
                  primary_group: {
                    'hosts': (current_inventory.all.children[primary_group].hosts | default({})) | combine(new_host_entry)
                  }
                })
              }
            }, recursive=True)
          }}
    
    - name: Update production inventory in Semaphore via API
      uri:
        url: "{{ semaphore_url }}/api/project/{{ semaphore_project_id }}/inventory/{{ semaphore_inventory_id }}"
        method: PUT
        headers:
          Authorization: "Bearer {{ semaphore_api_token }}"
          Content-Type: "application/json"
        body_format: json
        body: "{{ inventory_metadata | combine({'inventory': updated_inventory | to_nice_yaml}) }}"
        status_code: 204
        return_content: yes
      register: update_result
    
    - name: Trigger bootstrap playbook
      uri:
        url: "{{ semaphore_url }}/api/project/{{ semaphore_project_id }}/tasks"
        method: POST
        headers:
          Authorization: "Bearer {{ semaphore_api_token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          template_id: 1  # Bootstrap template ID
          message: "Bootstrap {{ target_hostname }}"
          environment: "{\"target_host\": \"{{ target_hostname }}\"}"
        status_code: 201
        return_content: yes
      register: bootstrap_task
    
    - name: Registration complete
      debug:
        msg: |
          ✓ Registration successful
          
          Hostname: {{ target_hostname }}
          Node ID: {{ host_config.node_id }}
          Temporary IP: {{ temp_ip_input }}
          Target IP: {{ host_config.primary_interface.static_ip }}
          Groups: {{ host_config.target_groups | join(', ') }}
          Lifecycle State: registered
          
          Bootstrap job triggered: Task {{ bootstrap_task.json.id }}
          Monitor at: {{ semaphore_url }}/project/{{ semaphore_project_id }}/history?t={{ bootstrap_task.json.id }}
