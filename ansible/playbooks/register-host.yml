---
# ansible/playbooks/register-host.yml
# MAC-based host registration with duplicate checking and multiple group support

- name: Register New Host via MAC Lookup
  hosts: localhost
  connection: local
  gather_facts: true

  vars:
    # Input parameters (passed via environment parameters in Semaphore)
    primary_mac_input: "{{ primary_mac | lower }}"
    temp_ip_input: "{{ temp_ip }}"

    # Optional: Bootstrap template override (passed via environment parameter)
    bootstrap_template_id: "{{ bootstrap_template_id | default(DEFAULT_BOOTSTRAP_TEMPLATE_ID | default('1')) }}"

    # Semaphore API details (set as environment variables in Semaphore)
    semaphore_url: "{{ SEMAPHORE_WEB_ROOT }}"
    semaphore_project_id: "{{ SEMAPHORE_PROJECT_ID }}"
    semaphore_inventory_id: "{{ SEMAPHORE_INVENTORY_ID }}"
    semaphore_api_token: "{{ SEMAPHORE_API_TOKEN }}"
    semaphore_api_timeout: "{{ SEMAPHORE_API_TIMEOUT | default(30) }}"

    # Configuration
    allow_reregistration: true  # Set to false to fail on duplicate

  tasks:
    - name: Display registration request
      ansible.builtin.debug:
        msg: |
          Registration request received:
          - Primary MAC: {{ primary_mac_input }}
          - Temporary IP: {{ temp_ip_input }}

    - name: Find matching host in provisioning inventory
      ansible.builtin.set_fact:
        matched_host: >-
          {{
            hostvars | dict2items |
            selectattr('value.primary_interface.mac', 'defined') |
            selectattr('value.primary_interface.mac', 'equalto', primary_mac_input) |
            first | default({'key': 'not_found', 'value': {}})
          }}

    - name: Verify host was found
      ansible.builtin.assert:
        that:
          - matched_host.key != 'not_found'
          - matched_host.value.target_hostname is defined
        fail_msg: |
          ❌ MAC {{ primary_mac_input }} not found in provisioning inventory.

    - name: Extract host configuration
      ansible.builtin.set_fact:
        host_config: "{{ matched_host.value }}"
        target_hostname: "{{ matched_host.value.target_hostname }}"

    - name: Display identified host
      ansible.builtin.debug:
        msg: |
          ✓ Host identified:
          Hostname: {{ target_hostname }}
          Node ID: {{ host_config.node_id }}
          Target Groups: {{ host_config.target_groups | join(', ') }}

    # ===== FETCH AND CHECK PRODUCTION INVENTORY =====
    - name: Fetch production inventory
      ansible.builtin.uri:
        url: "{{ semaphore_url }}/api/project/{{ semaphore_project_id }}/inventory/{{ semaphore_inventory_id }}"
        method: GET
        headers:
          Authorization: "Bearer {{ semaphore_api_token }}"
        return_content: true
        status_code: 200
      register: current_inventory_response

    - name: Parse production inventory
      ansible.builtin.set_fact:
        current_inventory: "{{ current_inventory_response.json.inventory | from_yaml }}"
        inventory_metadata: "{{ current_inventory_response.json }}"

    - name: Ensure all.children exists
      ansible.builtin.set_fact:
        current_inventory: >-
          {{
            current_inventory | combine({
              'all': {
                'children': current_inventory.all.children | default({})
              }
            }, recursive=True)
          }}

    # ===== CHECK IF HOST ALREADY EXISTS =====
    - name: Check if host already exists in production inventory
      ansible.builtin.set_fact:
        host_exists: false
        existing_groups: []

    - name: Search for existing host across all groups
      ansible.builtin.set_fact:
        host_exists: >-
          {{
            current_inventory.all.children | dict2items |
            selectattr('value.hosts', 'defined') |
            selectattr('value.hosts.' + target_hostname, 'defined') |
            list | length > 0
          }}
        existing_groups: >-
          {{
            current_inventory.all.children | dict2items |
            selectattr('value.hosts', 'defined') |
            selectattr('value.hosts.' + target_hostname, 'defined') |
            map(attribute='key') | list
          }}
      when: current_inventory.all.children is defined

    - name: Display existing host status
      ansible.builtin.debug:
        msg: |
          Host existence check:
          - Exists: {{ host_exists }}
          {% if host_exists %}
          - Current groups: {{ existing_groups | join(', ') }}
          - Current state: {{ current_inventory.all.children[existing_groups[0]].hosts[target_hostname].lifecycle_state | default('unknown') }}
          {% endif %}

    - name: Handle duplicate registration
      when: host_exists
      block:
        - name: Fail if reregistration not allowed
          ansible.builtin.fail:
            msg: |
              ❌ Host {{ target_hostname }} already exists in production inventory.
              Current groups: {{ existing_groups | join(', ') }}

              To allow updates, set allow_reregistration: true
          when: not allow_reregistration

        - name: Warn about reregistration
          ansible.builtin.debug:
            msg: |
              ⚠️  Host {{ target_hostname }} already exists - will update
              Previous groups: {{ existing_groups | join(', ') }}
              New groups: {{ host_config.target_groups | join(', ') }}


    # ===== ENSURE ALL TARGET GROUPS EXIST =====
    - name: Ensure all target groups exist in production inventory
      ansible.builtin.set_fact:
        current_inventory: >-
          {{
            current_inventory | combine({
              'all': {
                'children': current_inventory.all.children | combine({
                  item: {
                    'hosts': current_inventory.all.children[item].hosts | default({}),
                    'vars': {
                      'ansible_ssh_common_args': '-o StrictHostKeyChecking=no'
                    }
                  }
                })
              }
            }, recursive=True)
          }}
      loop: "{{ host_config.target_groups }}"

    # ===== BUILD HOST ENTRY =====
    - name: Build host configuration data
      ansible.builtin.set_fact:
        host_data:
          ansible_host: "{{ temp_ip_input }}"
          ansible_user: ansible
          ansible_python_interpreter: /usr/bin/python3
          lifecycle_state: registered
          registered_at: "{{ ansible_date_time.iso8601 }}"
          registered_by: first-boot-automation
          node_id: "{{ host_config.node_id }}"
          node_description: "{{ host_config.target_description }}"
          primary_mac: "{{ primary_mac_input }}"
          network_interfaces:
            primary: "{{ host_config.primary_interface }}"
            wifi: "{{ host_config.wifi_interface | default({}) }}"
            cluster: "{{ host_config.cluster_interface | default({}) }}"
          cluster_member: false
          target_cluster: "{{ host_config.target_cluster }}"
          cluster_role: "{{ host_config.target_role }}"
          storage_config: "{{ host_config.storage | default({}) }}"
          hardware: "{{ host_config.hardware | default({}) }}"

    # If host exists, preserve certain fields
    - name: Merge with existing host data if reregistering
      when: host_exists
      block:
        - name: Get existing host data
          ansible.builtin.set_fact:
            existing_host_ "{{ current_inventory.all.children[existing_groups[0]].hosts[target_hostname] }}"

        - name: Preserve lifecycle history
          ansible.builtin.set_fact:
            host_data: >-
              {{
                host_data | combine({
                  'first_registered_at': existing_host_data.registered_at | default(ansible_date_time.iso8601),
                  'reregistered_at': ansible_date_time.iso8601,
                  'bootstrapped_at': existing_host_data.bootstrapped_at | default(omit),
                  'clustered_at': existing_host_data.clustered_at | default(omit)
                })
              }}


    - name: Create new host entry with target hostname as key
      ansible.builtin.set_fact:
        new_host_entry: "{{ {target_hostname: host_data} }}"

    - name: Debug new host entry
      ansible.builtin.debug:
        msg: |
          New host entry:
          {{ new_host_entry | to_nice_yaml }}


    - name: Add host to primary group with full definition
      ansible.builtin.set_fact:
        primary_group: "{{ host_config.target_groups[0] }}"

    - name: Add host with full data to primary group
      ansible.builtin.set_fact:
        current_inventory: >-
          {{
            current_inventory | combine({
              'all': {
                'children': current_inventory.all.children | combine({
                  primary_group: {
                    'hosts': (current_inventory.all.children[primary_group].hosts | default({})) | combine(new_host_entry)
                  }
                })
              }
            }, recursive=True)
          }}

    - name: Add host references to additional groups
      ansible.builtin.set_fact:
        current_inventory: >-
          {{
            current_inventory | combine({
              'all': {
                'children': current_inventory.all.children | combine({
                  item: {
                    'hosts': (current_inventory.all.children[item].hosts | default({})) | combine({target_hostname: {}})
                  }
                })
              }
            }, recursive=True)
          }}
      loop: "{{ host_config.target_groups[1:] }}"
      when: host_config.target_groups | length > 1

    # ===== REMOVE FROM OLD GROUPS IF REREGISTERING =====
    - name: Remove from old groups not in new target_groups
      ansible.builtin.set_fact:
        current_inventory: >-
          {{
            current_inventory | combine({
              'all': {
                'children': current_inventory.all.children | combine({
                  item: {
                    'hosts': current_inventory.all.children[item].hosts | dict2items |
                             rejectattr('key', 'equalto', target_hostname) |
                             items2dict
                  }
                })
              }
            }, recursive=True)
          }}
      loop: "{{ existing_groups | difference(host_config.target_groups) }}"
      when: host_exists and existing_groups | length > 0

    - name: Build final updated inventory
      ansible.builtin.set_fact:
        updated_inventory: "{{ current_inventory }}"

    # - name: Final inventory for Semaphore
    #   debug:
    #     msg: |
    #       Updated inventory:
    #       {{ updated_inventory | to_nice_yaml }}

    # - name: Debug - Save exact payload being sent
    #   copy:
    #     content: |
    #       URL: {{ semaphore_url }}/api/project/{{ semaphore_project_id }}/inventory/{{ semaphore_inventory_id }}

    #       Headers:
    #       Authorization: Bearer {{ semaphore_api_token }}
    #       Content-Type: application/json

    #       Body:
    #       {{ inventory_metadata | combine({'inventory': updated_inventory | to_nice_yaml}) | to_nice_json(indent=2) }}
    #     dest: /tmp/semaphore_api_payload.json
    #   delegate_to: localhost

    # - name: Display payload path
    #   debug:
    #     msg: "Payload saved to /tmp/semaphore_api_payload.json - review before API call"

    # ===== UPDATE SEMAPHORE =====
    - name: Update production inventory in Semaphore
      ansible.builtin.uri:
        url: "{{ semaphore_url }}/api/project/{{ semaphore_project_id }}/inventory/{{ semaphore_inventory_id }}"
        method: PUT
        headers:
          Authorization: "Bearer {{ semaphore_api_token }}"
          Content-Type: "application/json"
        body_format: json
        body: "{{ inventory_metadata | combine({'inventory': updated_inventory | to_nice_yaml}) }}"
        timeout: "{{ semaphore_api_timeout }}"
        status_code: 204
        return_content: true
      register: update_result
      failed_when: false  # Don't fail, let us see the response
    - name: Show full API response
      ansible.builtin.debug:
        var: update_result

    - name: Fail if not successful
      ansible.builtin.fail:
        msg: |
          API call failed with status {{ update_result.status }}
          Response: {{ update_result.content }}
          URL: {{ update_result.url }}
      when: update_result.status != 204

    - name: Debug - Show exact body being sent
      ansible.builtin.debug:
        msg: |
          URL: {{ semaphore_url }}/api/project/{{ semaphore_project_id }}/tasks
          Body: {{ body_payload | to_nice_json }}
      vars:
        body_payload: >
          {
            "template_id": {{ bootstrap_template_id | int }},
            "message": "Bootstrap {{ target_hostname }}",
            "limit": "{{ target_hostname }}",
            "params": {
              "debug": false,
              "dry_run": true,
              "diff": false
            }
          }


    - name: Trigger bootstrap playbook
      ansible.builtin.uri:
        url: "{{ semaphore_url }}/api/project/{{ semaphore_project_id }}/tasks"
        method: POST
        headers:
          Authorization: "Bearer {{ semaphore_api_token }}"
          Content-Type: "application/json"
        body_format: json
        body: >
          {
            "template_id": {{ bootstrap_template_id | int }},
            "message": "Bootstrap {{ target_hostname }}",
            "limit": "{{ target_hostname }}",
            "params": {
              "debug": false,
              "dry_run": true,
              "diff": false
            }
          }
        # template_id: "{{ bootstrap_template_id | int }}"
        # message: "Bootstrap {{ target_hostname }}"
        # limit: "{{ target_hostname }}"
        # params:
        #   debug: false
        #   dry_run: true
        #   diff: false
        timeout: "{{ semaphore_api_timeout }}"
        status_code: 201
        return_content: true
      register: bootstrap_task
      failed_when: false  # Don't fail, let us see the response
      when: not host_exists or allow_reregistration
    - name: Show full API response
      ansible.builtin.debug:
        var: bootstrap_task

    - name: Fail if not successful
      ansible.builtin.fail:
        msg: |
          API call failed with status {{ bootstrap_task.status }}
          Response: {{ bootstrap_task.content }}
          URL: {{ bootstrap_task.url }}
      when: bootstrap_task.status != 204

    - name: Registration complete
      ansible.builtin.debug:
        msg: |
          ✓ Registration successful

          Hostname: {{ target_hostname }}
          Node ID: {{ host_config.node_id }}
          Status: {{ 'Updated' if host_exists else 'New' }}
          Groups: {{ host_config.target_groups | join(', ') }}
          Bootstrap Template: {{ bootstrap_template_id }}
          {% if existing_groups | length > 0 and host_exists %}
          Removed from: {{ existing_groups | difference(host_config.target_groups) | join(', ') or 'none' }}
          {% endif %}

          {% if not host_exists or allow_reregistration %}
          Bootstrap task: {{ bootstrap_task.json.id }}
          Monitor at: {{ semaphore_url }}/project/{{ semaphore_project_id }}/history?t={{ bootstrap_task.json.id }}
          {% endif %}
